---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SEO from '../components/SEO.astro';
const { title, description, image, author, type } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <SEO 
      title={title} 
      description={description} 
      image={image}
      author={author}
      type={type}
    />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/src/styles/style.css" />
    <style is:inline>
      /* Ensure CSS variables are available immediately */
      :root {
        --deep-brown: #4a3528;
        --warm-brown: #6b4e3d;
        --muted-gold: #c4a373;
        --warm-cream: #faf9f7;
        --light-beige: #f7f3ed;
        --transition-fast: 0.3s ease;
        --transition-medium: 0.6s ease;
      }
    </style>
  </head>
  <body>
    <Header />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
    
    <script>
      // Smooth scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
          }
        });
      }, observerOptions);

      // Observe all animated elements when DOM loads
      document.addEventListener('DOMContentLoaded', () => {
        const animatedElements = document.querySelectorAll('.animate-on-scroll');
        animatedElements.forEach(el => observer.observe(el));
        
        // Add smooth page load animation
        document.body.classList.add('loaded');
      });

      // Parallax effect for hero sections
      let ticking = false;
      
      function updateParallax() {
        const scrolled = window.pageYOffset;
        const parallaxElements = document.querySelectorAll('.parallax');
        
        parallaxElements.forEach(el => {
          const htmlEl = el as HTMLElement;
          const speedAttr = htmlEl.dataset.speed;
          const speed = speedAttr ? parseFloat(speedAttr) : 0.5;
          const yPos = -(scrolled * speed);
          htmlEl.style.transform = `translateY(${yPos}px)`;
        });
        
        ticking = false;
      }

      // Logo visibility control based on scroll
      function updateLogoVisibility() {
        const scrolled = window.pageYOffset;
        const heroHeight = window.innerHeight;
        const logo = document.querySelector('.hero-background-logo') as HTMLElement;
        
        if (logo) {
          if (scrolled > heroHeight * 0.8) {
            logo.style.opacity = '0';
            logo.style.transform = 'translate(-50%, -50%) scale(0.8)';
          } else {
            const fadeRatio = Math.max(0, 1 - (scrolled / (heroHeight * 0.8)));
            logo.style.opacity = (0.18 * fadeRatio).toString();
            const scale = 0.9 + (0.3 * fadeRatio);
            logo.style.transform = `translate(-50%, -50%) scale(${scale})`;
          }
        }
      }

      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            updateParallax();
            updateLogoVisibility();
          });
          ticking = true;
        }
      });
    </script>
  </body>
</html>